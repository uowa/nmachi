#!/usr/bin/env node

/**
 * モジュールの読み込み
 */
const app = require('../app');                     // Expressアプリ本体
const debug = require('debug')('pmachi6:server'); // デバッグ用
const fs = require('fs');                          // ファイル操作用
const http = require('http');                      // HTTPサーバー用
const https = require('https');                    // HTTPSサーバー用

/**
 * ポート番号を正規化する関数
 * - 数字ならそのまま返す
 * - named pipe なら文字列を返す
 * - 無効なら false を返す
 */
function normalizePort(val) {
  const port = parseInt(val, 10);
  if (isNaN(port)) {
    // 数字に変換できなければ named pipe とみなす
    return val;
  }
  if (port >= 0) {
    // 正の数字ならポート番号として返す
    return port;
  }
  return false; // 無効なポート
}



//サーバーエラー時の処理
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error; // listen 系のエラーでなければ投げる
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port  // named pipe の場合
    : 'Port ' + port; // ポート番号の場合

  // 特定のエラーに対してわかりやすいメッセージ
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' は管理者権限が必要です');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' は既に使用中です');
      process.exit(1);
      break;
    default:
      throw error;
  }
}


// サーバーが起動したときの処理
function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr      // named pipe の場合
    : 'port ' + addr.port; // ポート番号の場合
  debug('Listening on ' + bind); // デバッグ用出力
}


// 環境変数やデフォルト値からポート番号を取得して Express に設定
const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * サーバー作成
 * - SSL キーファイルがあれば HTTPS
 * - なければ HTTP
 */
let server;

try {
  // SSL 証明書ファイルのパス
  const nmachi_key = '../../../../usr/local/nginx/nmachi20201226.key';
  const nmachi_crt = '../../../../usr/local/nginx/nmachi20220126.crt';
  const nmachi_chain = '../../../../usr/local/nginx/nmachi20220126.pem';

  // SSL オプション作成
  const options = {
    key: fs.readFileSync(nmachi_key),
    cert: fs.readFileSync(nmachi_crt),
    ca: fs.readFileSync(nmachi_chain)
  };

  // HTTPS サーバー作成
  server = https.createServer(options, app);
  console.log('HTTPS サーバーを作成しました');
} catch (err) {
  // ファイルが見つからなければ HTTP にフォールバック
  console.warn('SSL ファイルが見つかりません。HTTP サーバーに切り替えます');
  server = http.createServer(app);
}

// Socket.IO のセットアップ - クライアントとリアルタイム通信するためのライブラリ
const io = require('socket.io')(server);


// 環境に応じてサーバーのバインド先を決定
// NODE_ENV が 'production' の場合 → 本番環境とみなし localhost にバインド
// Codespaces 上の場合 → process.env.CODESPACE が設定されているので 0.0.0.0 にバインド（外部アクセス可能）
// それ以外（通常ローカル開発など） → localhost にバインド
const isCodespaces = !!process.env.CODESPACES || !!process.env.CODESPACE_NAME;
const host = process.env.NODE_ENV === 'production' ? 'localhost'
  : isCodespaces ? '0.0.0.0'
    : 'localhost';




// サーバー起動
server.listen(port, host, () => {
  console.log(`Server running at http://${host}:${port}/`);
});
server.on('error', onError);
server.on('listening', onListening);


let ip = {};

let user = {};
let socketID = {};
let tokenNum = 0;

let rooms = {};
let roomNameList = ["エントランス", "うちゅー", "星1",];
for (let i = 0; i < roomNameList.length; i++) {
  rooms[roomNameList[i]] = {
    drawHistory: [],
    usersToken: new Set(),
  };
}

const { setInterval } = require('timers');

const crypto = require("crypto");

function tripCreate(isTrip) {
  let tripkey = isTrip;
  // ソルト生成（2文字以上になるように 'H.' を追加し、2文字目と3文字目を切り出し）
  let salt = (tripkey + "H.").slice(1, 3);
  salt = salt.replace(/[^.-z]/g, ".");
  salt = salt.replace(/:/g, "A");
  salt = salt.replace(/;/g, "B");
  salt = salt.replace(/</g, "C");
  salt = salt.replace(/=/g, "D");
  salt = salt.replace(/>/g, "E");
  salt = salt.replace(/\?/g, "F");
  salt = salt.replace(/@/g, "G");
  salt = salt.replace(/\[/g, "a");
  salt = salt.replace(/\\/g, "b");
  salt = salt.replace(/]/g, "c");
  salt = salt.replace(/\^/g, "d");
  salt = salt.replace(/_/g, "e");
  salt = salt.replace(/`/g, "f");

  // AES用のキーとIVを生成（16バイトずつ、saltを埋めて残りは0埋め）
  const key = Buffer.alloc(32, 0); // AES-256なので32バイト
  key.write(salt, 0, "utf-8");
  const iv = Buffer.alloc(16, 0);  // IVは16バイト
  iv.write(salt, 0, "utf-8");

  // 暗号化
  const cipher = crypto.createCipheriv("aes-256-cbc", key, iv);
  let encrypted = cipher.update(tripkey, "utf-8", "base64");
  encrypted += cipher.final("base64");

  // トリップとして末尾10文字（=は除去）
  let trip = encrypted.substr(-10).replace(/=/g, "");
  trip = "◆" + trip;
  return trip;
}

let msgSE = {};
msgSE.login = {};
msgSE.login.in = new Array(0);
msgSE.login.logout = new Array(0);
msgSE.other = {};
msgSE.other.in = new Array(1);
msgSE.other.out = new Array(3);
msgSE.other.logout = new Array(1);
msgSE.outerSpace = {};
msgSE.outerSpace.in = new Array(1);
msgSE.outerSpace.out = new Array(1);
msgSE.outerSpace.logout = new Array(1);

function time() {
  return " -- " + new Date().getHours().toLocaleString() + ":" + new Date().getMinutes().toLocaleString() + "--";
}


let random;
function volumeRandom(roomName, move) {
  if (roomName === "エントランス") {//※部屋数が増えたら||で継ぎ足す
    random = Math.floor(Math.random() * msgSE.other[move].length);
  } else if (roomName === "うちゅー" || roomName === "星1") {
    random = Math.floor(Math.random() * msgSE.outerSpace[move].length);
  } else {
    random = Math.floor(Math.random() * msgSE[roomName][move].length);
  }
  return random;
}

//星1の星の色用ランダムカラー配列作成
const starColors = [];
setStarRandomColor();

function setStarRandomColor() {
  starColors.length = 0;
  for (let i = 0; i < 1000; i++) {
    // 0x000000～0xFFFFFFのランダムカラー
    starColors.push(Math.floor(Math.random() * 0xFFFFFF));
  }
}


// クライアントがサーバーに接続したときの処理
io.on('connection', socket => {
  // ユーザーごとに一意なトークンを発行
  const token = crypto.randomUUID();
  socketID[token] = socket.id;

  // サーバー再起動時にクライアントへ再読み込みを促すメッセージを送る関数
  function checkUser() {
    if (!user[token]) {
      io.to(socket.id).emit("emitSaikiMsg", {
        msg: "ブラウザを更新してください",
      });
      return false;
    }
    return true;
  }

  /**
 * ユーザーが寝てたら起こす関数。
 * sleepTimeNumが30分以上かつselfSleepがfalseの場合、ユーザーのsleep状態をfalseに設定し、
 * 対応するルームにsleepイベントを送信します。その後、sleepTimeNumをリセットします。
 */
  function sleepTime() {
    if (user[token].sleepTimeNum >= 30 * 60 && user[token].selfSleep == false) {
      user[token].sleep = false;
      io.to(user[token].room).emit("sleep", {
        token: token,
        sleep: user[token].sleep,
      });
    }
    user[token].sleepTimeNum = 0;
  }



  // ユーザー情報を取得するイベント
  socket.on("getMyUser", () => {
    // ユーザー情報を初期化して保存
    user[token] = {
      userName: "名もなき名無し", // デフォルト名
      token: token,
      AX: 457, // 初期X座標
      AY: 80,  // 初期Y座標
      DIR: "S", // 初期向き
      msg: "",
      tarAspect: "gomaneco", // デフォルトアバター
      room: "loginRoom",   // 初期部屋
      video: false,
      audio: false,
      timeShade: new Date().getHours(),
      avatarAlpha: 1.0,//アバターの透明度
      sleep: false,
      sit: false,
      selfSleep: false,//ユーザー自身で設定した眠り状態
      sleepTimeNum: 0,
      drawHistory: [],
      carryOver: false,//ログ残し状態かどうか

      // 一定時間操作がなければ自動でスリープ状態にする関数
      countSleep: () => {
        let setTimeoutSleep;
        if (user[token]) {
          user[token].sleepTimeNum++;
          // 30分（1800秒）経過でスリープ
          if (user[token].sleepTimeNum == 30 * 60) {
            user[token].sleep = true;
            io.to(user[token].room).emit("sleep", {
              token: token,
              sleep: user[token].sleep,
            });
          }
          setTimeoutSleep = setTimeout(user[token].countSleep, 1000); // 1秒ごとにカウント
        } else {
          clearTimeout(setTimeoutSleep); // ユーザーがいなければタイマー解除
        }
      },
    }

    tokenNum++;

    io.to(socket.id).emit("userInit", {
      token: token,
    });
    user[token].countSleep();
  });


  socket.on("joineRoom", data => {//部屋移動
    if (!checkUser()) return;
    // IP取得方法の検証用
    // console.log("userIP");
    // console.log(socket.handshake.address);
    // console.log(socket.handshake.address.address);
    // console.log(socket.handshake.address.port);
    // console.log(socket.handshake.headers['x-forwarded-for']);
    // console.log(socket.request.headers['x-forwarded-for']);
    // console.log(socket.request.connection.remoteAddress);
    let announce;
    let fromRoom = user[token].room;
    user[token].room = data.toRoom;
    rooms[data.toRoom].usersToken.add(token);//部屋のユーザーリストに追加
    user[token].carryOver = false;


    if (fromRoom === "loginRoom" && data.userName.length < 28) {//ログインの時かつ、名前が28未満の時
      //トリップを作る
      if (!ip[socket.handshake.address]) {
        ip[socket.handshake.address] = { name: [data.userName], ip: socket.handshake.address };
      } else {
        if (!ip[socket.handshake.address].name.includes(data.userName)) {
          ip[socket.handshake.address].name.push(data.userName);
        }
      }
      data.userName = data.userName.replace(/◆/g, '□');
      if (data.userName.match(/#/)) {
        let index = data.userName.indexOf("#");
        let tripStr = data.userName.slice(index + 1);
        let tripName = data.userName.slice(0, index);
        data.userName = tripName + tripCreate(tripStr);
      }
      if (data.userName.match(/＃/)) {
        let index = data.userName.indexOf("＃");
        let tripStr = data.userName.slice(index + 1);
        let tripName = data.userName.slice(0, index);
        data.userName = tripName + tripCreate(tripStr);
      }
      user[token].userName = data.userName;//名前をサバに保存
      user[token].avatarAspect = data.avatarAspect;//アバターを設定
      user[token].avatarColor = data.avatarColor;//アバターの色を設定
      user[token].avatarAlpha = data.avatarAlpha;//アバターの透明度を設定

      //soundNumの決定
      user[token].soundNum = data.userName.length;
      if (data.avatar == "necosuke" || data.avatar == "necosukeMono") {
        user[token].soundNum++;
      }
      user[token].soundNum += data.avatarColor;
      user[token].soundNum = user[token].soundNum % 9;

      random = volumeRandom("login", "in");

      //アバターお絵描き
      user[token].drawHistory = data.drawHistory;

      announce = user[token].userName + "が" + data.toRoom + "に入室しました。" + time();
    } else {//loginRoomから以外の時
      //退室処理
      rooms[fromRoom].usersToken.delete(token);//元の部屋のユーザーリストから削除

      if (data.train) {
        announce = user[token].userName + "が電車に乗り込みました、ゆんやー！" + time();
      } else {
        announce = user[token].userName + "が" + data.toRoom + "に移動しました。" + time();
      }

      if (fromRoom === "星1") {
        setStarRandomColor();
      }

      socket.broadcast.to(fromRoom).emit("otherLeft", {//自分以外が部屋を出た場合
        token: token,
        random: volumeRandom(fromRoom, "out"),
        announce: announce,
        starColors: starColors,
      });



      //入室処理
      switch (data.toSpot) {
        case "entranceCloud1":
          user[token].AX = 150;
          user[token].AY = 130;
          user[token].DIR = "S";
          break;
        case "outerSpaceMainSpot":
          user[token].AX = 200;
          user[token].AY = 300;
          user[token].DIR = "S";
          break;
        case "star1EntrySpot":
          user[token].AX = 334;
          user[token].AY = 450;
          user[token].DIR = "N";
          break;
      }
      user[token].msg = "";

      if (data.train) {
        announce = user[token].userName + "が電車に乗ってきました。" + time();
      } else {
        announce = user[token].userName + "が" + fromRoom + "から移動してきました。" + time();
      }
      random = volumeRandom(data.toRoom, "in");
    }


    if (fromRoom !== data.toRoom) {
      socket.leave(fromRoom);
      socket.join(data.toRoom);
    }

    io.to(socket.id).emit("joineRoom", {
      user: user,
      announce: announce,
      fromRoom: fromRoom,
      toRoom: data.toRoom,
      drawHistory: rooms[data.toRoom].drawHistory,
      random: random,
      starColors: starColors,
    });

    socket.broadcast.to(data.toRoom).emit("otherJoined", {
      userName: user[token].userName,
      token: token,
      avatarAspect: user[token].avatarAspect,
      avatarColor: user[token].avatarColor,
      avatarAlpha: user[token].avatarAlpha,
      AX: user[token].AX,
      AY: user[token].AY,
      DIR: user[token].DIR,
      sit: user[token].sit,
      sleep: user[token].sleep,
      announce: announce,
      msg: user[token].msg,
      drawHistory: user[token].drawHistory,

      fromRoom: fromRoom,
      toRoom: data.toRoom,
      random: random
    });
    sleepTime();
  });





  //sleep情報を受け取ったら自分以外の部屋の人にスリープ情報を送る
  socket.on("sleep", () => {
    if (!checkUser()) return;
    if (user[token].sleep) {//寝てた時
      user[token].sleep = false;
      user[token].selfSleep = false;
      user[token].DIR = "S";
    } else {//起きてた時
      user[token].sleep = true;
      user[token].selfSleep = true;
    }
    socket.broadcast.to(user[token].room).emit("sleep", {
      token: token,
      sleep: user[token].sleep,
    });
    user[token].sleepTimeNum = 0;
  });

  //アボンを受け取ったら、アボン設定を行う
  socket.on("abonSetting", data => {
    if (!checkUser()) return;
    let abonMsg;
    if (user[data.token] == null) {
      abonMsg = "その住民は退出済みです";
      io.to(socket.id).emit("abonSetting", {
        msg: abonMsg,
      });
    } else if (!data.setAbon) {
      abonMsg = user[data.token].userName + "をアボンしました。";
      io.to(socket.id).emit("abonSetting", {
        msg: abonMsg,
        token: data.token,
      });
    } else {
      abonMsg = user[data.token].userName + "のあぼんをやめました";
      io.to(socket.id).emit("abonSetting", {
        msg: abonMsg,
        token: data.token,
        AX: user[data.token].AX,
        AY: user[data.token].AY,
        DIR: user[data.token].DIR,
        sit: user[data.token].sit,
        room: user[data.token].room,
        alpha: user[data.token].avatarAlpha,
        sleep: user[data.token].sleep,
      });
    }
    sleepTime();
  });


  //tapイベント
  socket.on('tapMap', data => {
    if (!checkUser()) return;
    user[token].DIR = data.DIR;
    user[token].AX = data.AX;
    user[token].AY = data.AY;
    user[token].sit = data.sit;

    socket.broadcast.to(user[token].room).emit("tapMap", {
      DIR: data.DIR,
      token: token,
      AX: data.AX,
      AY: data.AY,
      sit: data.sit,
    });
    sleepTime();
  });


  //空から落ちた時の位置情報是正用
  socket.on('transformData', data => {
    if (!checkUser()) return;
    user[token].DIR = data.DIR;
    user[token].AX = data.AX;
    user[token].AY = data.AY;
  });

  socket.on("alphaChange", data => {//透明にする
    if (!checkUser()) return;
    user[token].avatarAlpha = data.alpha;//アバターの透明度を設定
    if (user[token].room !== "loginRoom") {
      socket.broadcast.to(user[token].room).emit("alphaChange", {
        token: token,
        alpha: data.alpha,
      });
    }
    sleepTime();
  });



  //クライアントからメッセージを受けとったら送信
  socket.on("emit_msg", data => {
    if (!checkUser()) return;

    let fontColor = "black";
    if (data.msg == "スシ" || data.msg == "ｽｼ" || data.msg == "すし" || data.msg == "🍣" || data.msg == "寿司" || data.msg == "鮨" || data.msg == "susi") {
      data.msg += "(" + new Date().getHours().toLocaleString() + ":" + new Date().getMinutes().toLocaleString() + ")";
      fontColor = "white";
    }
    if (data.msg == "もみころ") {
      data.msg += "(もみじゆるさんの略)";
    }
    if (data.carryOver) {
      user[token].msg = data.msg;
      user[token].carryOver = true;

      //最後に発言したcarryOverメッセージをuserの最後に入れなおす
      let value = user[token];
      delete user[token];
      user[token] = value;

    } else {//carryOverじゃないなら、userのメッセージ情報は消しとく
      user[token].msg = "";
      user[token].carryOver = false;
    }


    if (data.msg == "#list" || data.msg == "#ﾘｽﾄ" || data.msg == "#リスト") {
      let listName = [];
      let listToken = [];
      let n = 0;
      Object.keys(user).forEach(key => {
        if (user[key].room == user[token].room) {
          listName[n] = user[key].userName;
          listToken[n] = key;
          n++;
        }
      });
      io.to(socket.id).emit("list", {
        listName: listName,
        listToken: listToken,
      });


    } else if (data.msg == "#train" || data.msg == "#ﾄﾚｲﾝ" || data.msg == "#トレイン" || data.msg == "#rula" || data.msg == "#ﾙｰﾗ" || data.msg == "#ルーラ" || data.msg == "#電車") {

      let trainList = [];
      for (let i = 0; i < roomNameList.length; i++) {
        trainList[i] = roomNameList[i] + ":";
        Object.keys(user).forEach(key => {
          if (user[key].room === roomNameList[i]) {
            if (user[key].video && user[key].audio) {
              trainList[i] += user[key].userName + "📺🔊 "
            } else if (user[key].video) {
              trainList[i] += user[key].userName + "📺 "
            } else if (user[key].audio) {
              trainList[i] += user[key].userName + "🔊 "
            } else {
            }
          }
        });
        trainList[i] += rooms[roomNameList[i]].usersToken.size;
      }

      io.to(socket.id).emit("train", {
        roomNameList: roomNameList,
        trainList: trainList,
      });
    } else {
      io.to(user[token].room).emit("emit_msg", {
        userName: user[token].userName,
        msg: data.msg,
        token: token,
        carryOver: data.carryOver,
        fontColor: fontColor,
        soundNum: user[token].soundNum,
      });
    }
    sleepTime();
  });


  //お絵描き関連
  socket.on("oekaki", data => {
    if (!checkUser()) return;
    if (user[token].room !== "loginRoom") {
      const target = data.avatarOekakiToken ? user[data.avatarOekakiToken] : rooms[user[token].room];

      target.drawHistory.push(data.line);

      socket.broadcast.to(user[token].room).emit("oekaki", {
        token: token,
        targetToken: data.avatarOekakiToken,
        line: data.line,
      });
      sleepTime();
    }
  });

  socket.on("oekakiClear", data => {
    if (!checkUser()) return;
    if (user[token].room !== "loginRoom") {
      const target = data.avatarOekakiToken ? user[data.avatarOekakiToken] : rooms[user[token].room];
      target.drawHistory = data.history;
      socket.broadcast.to(user[token].room).emit("oekakiClear", {
        token: token,
        targetToken: data.avatarOekakiToken,
        history: target.drawHistory,
      });
      sleepTime();
    }
  });

  socket.on("undo", data => {//お絵描きを戻す
    if (!checkUser()) return;
    if (user[token].room !== "loginRoom") {
      const target = data.avatarOekakiToken ? user[data.avatarOekakiToken] : rooms[user[token].room];
      target.drawHistory = data.history;
      socket.broadcast.to(user[token].room).emit("undo", {
        token: token,
        targetToken: data.avatarOekakiToken,
        history: target.drawHistory
      });
      sleepTime();
    }
  });




  // ---- 配信関連 ----
  // When a user send a SDP message
  // broadcast to all users in the room
  socket.on("mediaButton", data => {
    if (!checkUser()) return;
    data.from = token;

    if (user[token].room) {
      socket.broadcast.to(user[token].room).emit("mediaButton", data);
    }
  });


  socket.on("webRtcSignal", data => {
    if (!checkUser()) return;
    data.from = token;

    // get send target
    if (data.sendto) {//sendtoの送り先
      const sendID = socketID[data.sendto];
      socket.to(sendID).emit("webRtcSignal", data);
    }
  });


  socket.on("stream", data => {
    if (!checkUser()) return;
    console.log(data); // ここでundefinedならサーバー送信ミス
    if (user[token].room !== "loginRoom") {
      let format = "";
      if (data.format === "videoStart") {
        user[token].video = true;
        format = "が動画配信を始めました";
      } else if (data.format === "videoStop") {
        user[token].video = false;
        format = "が動画配信を終わりました";
      } else if (data.format === "audioStart") {
        user[token].audio = true;
        format = "が音声配信を始めました";
      } else if (data.format === "audioStop") {
        format = "が音声配信を終わりました";
        user[token].audio = false;
      }
      io.to(user[token].room).emit("stream", {
        msg: user[token].userName + format + time(),
        token: token,
      });
      sleepTime();
    }
  });


  // 退出時
  socket.on("disconnect", () => {
    if (!checkUser()) return;
    if (user[token].room !== "loginRoom") {
      rooms[user[token].room].usersToken.delete(token);//部屋のユーザーリストから削除

      io.to(user[token].room).emit("logout", {
        token: token,
        msg: user[token].userName + "が退出しました。" + time(),
        room: user[token].room,
        random: volumeRandom(user[token].room, "logout"),
      });
    }

    //メモリ解放
    delete user[token];
    delete socketID[token];

    // close user connection
    console.log((new Date()) + ' Peer disconnected. id=' + socket.id);

    // --- emit ----//ユーザー全体に退出を伝えるための関数だが、部屋をまたがる通知を実装してないのでつかってない。
    // emitMessageBroadcast('user disconnected', { id: token});

    //  socket.roomname という変数があれば、その部屋からユーザーを強制的に退出させるためのコード
    // --- leave room --socket.roomname = roomname;
    // if (socket.roomname) {
    //   socket.leave(socket.roomname);
    // }
  });
});